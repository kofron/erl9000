% a simple PEG for Neotoma to consume for IRC message parsing.
% messages follow the format: :<prefix> command <params> :<trailing>

message <- (prefix spc)? command spc (params)? (':' trailing)? eol?`
FlatNode = lists:flatten(Node),
lists:filter(fun erlang:is_tuple/1, lists:flatten(Node))
`;

% the prefix is optional and can either be nick!host, or nick
prefix <- ':' nick:nick? ('!'? host:host)?`
Tuples = lists:filter(fun erlang:is_tuple/1, lists:flatten(Node)),
BCat = fun(A, B) -> <<A/binary, B/binary>> end,
lists:map(fun({K,V}) -> {K, lists:foldr(BCat, <<>>, V)} end, Tuples)
`;

% still need to implement service commands here.
command <- (word / number+) `
BCat = fun(A, B) -> <<A/binary, B/binary>> end,
{command, lists:foldr(BCat, <<>>, Node)}
`;

params <- (!':' (channel:channel / param:language+) (spc / eol))+`
Tuples = lists:filter(fun erlang:is_tuple/1, lists:flatten(Node)),

BCat = fun(A, B) -> <<A/binary, B/binary>> end,

lists:map(fun({K,V}) -> {K, lists:foldr(BCat, <<>>, lists:flatten(V))} end, Tuples)
`;

trailing <- ( bot_command:bot_command / (language spc*)* )`
Res = case Node of
		{bot_command, Stuff} ->
			Tuples = lists:filter(fun erlang:is_tuple/1, lists:flatten(Stuff)),
			BCat = fun(A, B) -> <<A/binary, B/binary>> end,
			lists:map(fun({K,V}) -> {K, lists:foldr(BCat, <<>>, lists:flatten(V))} end, Tuples);
		Other ->
			BCat = fun(A, B) -> <<A/binary, B/binary>> end,
			{trailing, lists:foldr(BCat, <<>>, lists:flatten(Other))}
	end,
Res
`;

nick <- (letter / number / '_' / '-' / '`')+;

host <- ('~' / '@' / '-' / '_' / '.' / '/' / ':' / letter / number)+;

channel <- (('&' / '#' / '+' / '!') letter+);

number <- [0-9];

language <- (!eol !spc .);

word <- (letter)+;

letter <- [a-zA-Z];

eol <- '\r\n';

bot_command <- '!' bot_cmd_name:letter+ (spc bot_cmd_arg:(language spc?)*)?;

spc <- ' ';